/**
 * Image recommendation service for menu items
 * Provides AI-generated image suggestions using Google Gemini
 */

export interface ImageSuggestion {
  url: string;
  alt: string;
  source: "ai-generated";
  attribution?: string;
  prompt?: string; // Store the prompt used for AI generation
}

export interface ImageRecommendationOptions {
  maxResults?: number;
  useAI?: boolean; // Whether to use AI generation
  style?:
    | "realistic"
    | "artistic"
    | "minimalist"
    | "professional"
    | "casual"
    | "rustic"
    | "simple"; // extra softer styles for less glossy results
}

/**
 * Generate a detailed prompt for AI image generation
 */
function generateImagePrompt(
  dishName: string,
  description?: string,
  styleOverride?: string
): string {
  // Build a richer base including sensory adjectives extracted heuristically
  const trimmedDesc = description?.trim();
  const basePrompt = trimmedDesc ? `${dishName} ‚Äì ${trimmedDesc}` : dishName;

  const stylePrompts = {
    realistic:
      "photorealistic, high-quality food photography, natural lighting, appetizing presentation",
    artistic:
      "artistic food styling, creative plating, vibrant colors, professional food photography",
    minimalist:
      "clean, minimalist food photography, simple background, elegant presentation",
    professional:
      "professional restaurant-quality food photography, beautiful plating, appetizing, high resolution",
    casual:
      "casual everyday presentation, natural diffused daylight, approachable, lightly styled, slight imperfections",
    rustic:
      "rustic homestyle presentation, wooden surface, warm natural lighting, cozy atmosphere, authentic",
    simple:
      "simple straightforward presentation, no heavy styling, neutral background, clear focus on the dish",
  };

  const selectedStyle =
    stylePrompts[styleOverride as keyof typeof stylePrompts] ||
    stylePrompts.professional;

  // Light variability cues to avoid repetition
  const variability = [
    "soft shadows",
    "balanced composition",
    "slight overhead angle",
    "45-degree angle",
    "natural color grading",
  ];
  const picked = variability.sort(() => 0.5 - Math.random()).slice(0, 2);

  return `Food photo: ${basePrompt}. Style focus: ${selectedStyle}. Include ${picked.join(
    " and "
  )}. Square 1:1, appetizing but not overly glossy, realistic portion size, no text, no watermark.`;
}

/**
 * Generate image using Google Gemini AI
 */
async function generateAIImage(
  dishName: string,
  description?: string,
  styleOverride?: string
): Promise<ImageSuggestion | null> {
  try {
    const prompt = generateImagePrompt(dishName, description, styleOverride);

    // Call our API endpoint that handles Gemini integration
    const response = await fetch("/api/generate-image", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        prompt,
        dishName,
        description,
        style: styleOverride,
      }),
    });

    if (!response.ok) {
      throw new Error(`AI image generation failed: ${response.status}`);
    }

    const data = await response.json();

    if (data.imageUrl) {
      return {
        url: data.imageUrl,
        alt: dishName,
        source: "ai-generated" as const,
        attribution: "Generated by AI",
        prompt: prompt,
      };
    }

    return null;
  } catch (error) {
    console.error("Error generating AI image:", error);
    return null;
  }
}

/**
 * Generate multiple AI images for a dish
 */
async function generateMultipleAIImages(
  dishName: string,
  description?: string,
  maxResults: number = 3,
  style: string = "professional"
): Promise<ImageSuggestion[]> {
  console.log(
    `üñºÔ∏è  Generating ${maxResults} AI images for: "${dishName}" in parallel`
  );

  // Try to generate multiple variations with slightly different prompts
  const variations = [
    "professional",
    "casual",
    "rustic",
    "minimalist",
    "simple",
    "artistic",
    "realistic",
  ];

  const maxAttempts = Math.min(maxResults, variations.length);

  // Create all requests in parallel
  const imagePromises = variations
    .slice(0, maxAttempts)
    .map(async (variantStyle, index) => {
      try {
        const prompt = generateImagePrompt(dishName, description, variantStyle);

        console.log(
          `üé® Starting AI generation ${
            index + 1
          }/${maxAttempts} with style: ${variantStyle}`
        );

        const response = await fetch("/api/generate-image", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            prompt,
            dishName,
            description,
            style: variantStyle,
          }),
        });

        console.log(
          `üì° API response for variant ${index + 1}: Status ${response.status}`
        );

        if (response.ok) {
          const data = await response.json();
          console.log(`üìä API response data for variant ${index + 1}:`, data);

          if (data.imageUrl) {
            console.log(
              `‚úÖ Successfully generated image ${
                index + 1
              }: ${data.imageUrl.substring(0, 100)}...`
            );
            return {
              url: data.imageUrl,
              alt: `${dishName}`,
              source: "ai-generated" as const,
              attribution: "Generated by AI",
              prompt: data.prompt || prompt,
            } as ImageSuggestion;
          } else {
            console.warn(`‚ö†Ô∏è No imageUrl in response for variant ${index + 1}`);
            return null;
          }
        } else {
          const errorData = await response
            .json()
            .catch(() => ({ error: "Unknown error" }));
          console.error(
            `‚ùå API error for variant ${index + 1}:`,
            response.status,
            errorData
          );
          return null;
        }
      } catch (error) {
        console.error(`üí• Error generating image variant ${index + 1}:`, error);
        return null;
      }
    });

  // Wait for all requests to complete
  console.log(`‚è≥ Waiting for ${maxAttempts} parallel image generations...`);
  const results = await Promise.all(imagePromises);

  // Filter out null results and return successful generations
  const suggestions = results.filter(
    (result): result is ImageSuggestion => result !== null
  );

  console.log(
    `üéØ Generated ${suggestions.length}/${maxAttempts} images successfully`
  );
  return suggestions;
}

/**
 * Main function to get image recommendations for a dish
 */
export async function getImageRecommendations(
  dishName: string,
  description?: string,
  options: ImageRecommendationOptions = {}
): Promise<ImageSuggestion[]> {
  const { maxResults = 3, useAI = true, style = "professional" } = options;

  console.log(
    `üîç Getting image recommendations for: "${dishName}" (maxResults: ${maxResults}, useAI: ${useAI})`
  );

  if (!dishName.trim()) {
    console.warn("‚ö†Ô∏è  Empty dish name provided");
    return [];
  }

  try {
    if (!useAI) {
      console.warn("AI generation disabled, but no fallback images available");
      return [];
    }

    // Generate multiple AI images with different styles
    const suggestions = await generateMultipleAIImages(
      dishName,
      description,
      maxResults,
      style
    );

    console.log(
      `üìã Final recommendations: ${suggestions.length} suggestions returned`
    );
    suggestions.forEach((suggestion, index) => {
      console.log(`  ${index + 1}. ${suggestion.url} (${suggestion.source})`);
    });

    return suggestions.slice(0, maxResults);
  } catch (error) {
    console.error("‚ùå Error getting image recommendations:", error);
    return [];
  }
}

/**
 * Get a single best image recommendation for a dish
 */
export async function getBestImageRecommendation(
  dishName: string,
  description?: string,
  options: ImageRecommendationOptions = {}
): Promise<ImageSuggestion | null> {
  const { useAI = true, style = "professional" } = options;

  if (!dishName.trim()) {
    return null;
  }

  if (!useAI) {
    console.warn("AI generation disabled, no image recommendations available");
    return null;
  }

  // Try AI generation
  const aiSuggestion = await generateAIImage(dishName, description, style);
  return aiSuggestion;
}
