import { NextRequest, NextResponse } from "next/server";
import { GoogleGenAI } from "@google/genai";

// Initialize Gemini AI for image generation
const genAI = new GoogleGenAI({
  apiKey: process.env.GOOGLE_GEMINI_API_KEY || "",
});

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { dishName, description, style = "professional" } = body;

    console.log(`🤖 AI Image generation request for: "${dishName}"`);

    if (!dishName) {
      return NextResponse.json(
        { error: "Dish name is required" },
        { status: 400 }
      );
    }

    // Check if Gemini API is configured
    if (!process.env.GOOGLE_GEMINI_API_KEY) {
      console.log("⚠️ No Gemini API key configured");
      return NextResponse.json(
        { error: "Gemini API key not configured" },
        { status: 500 }
      );
    }

    try {
      // Create a detailed prompt for food photography
      const prompt = createFoodImagePrompt(dishName, description, style);

      console.log(`📝 Generated prompt: ${prompt}`);

      // Generate image using Gemini 2.5 Flash Image model
      const response = await genAI.models.generateContent({
        model: "gemini-2.5-flash-image-preview",
        contents: prompt,
      });

      // Process the response
      for (const part of response.candidates?.[0]?.content?.parts || []) {
        if (part.inlineData && part.inlineData.data) {
          console.log(`✅ Successfully generated image for "${dishName}"`);

          // Convert base64 to data URL
          const imageUrl = `data:image/png;base64,${part.inlineData.data}`;

          return NextResponse.json({
            imageUrl,
            alt: dishName,
            prompt,
            source: "gemini-generated",
          });
        }

        if (part.text) {
          console.log(`� Gemini response text: ${part.text}`);
        }
      }

      // If we get here, no image was generated
      console.log("❌ No image generated in response");
      return NextResponse.json(
        { error: "No image was generated by Gemini" },
        { status: 500 }
      );
    } catch (aiError: unknown) {
      console.error("🚫 Gemini AI error:", aiError);
      return NextResponse.json(
        {
          error: `AI generation failed: ${
            aiError instanceof Error ? aiError.message : "Unknown error"
          }`,
        },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("💥 Image generation error:", error);
    return NextResponse.json(
      { error: "Failed to generate image" },
      { status: 500 }
    );
  }
}

function createFoodImagePrompt(
  dishName: string,
  description?: string,
  style: string = "professional"
): string {
  const baseDesc = description?.trim()
    ? `${dishName} – ${description.trim()}`
    : dishName;

  const stylePrompts = {
    professional:
      "restaurant menu style, balanced lighting, appetizing, subtle depth of field",
    rustic:
      "rustic homestyle setting, warm natural light, wooden surface, authentic",
    elegant: "fine dining plating, refined minimal garnish, soft side lighting",
    casual: "casual everyday presentation, natural daylight, approachable",
    modern: "modern minimalist plating, clean background, contemporary styling",
    minimalist: "minimalist composition, neutral background, simple styling",
    simple: "simple straightforward plating, neutral backdrop",
    artistic:
      "creative plating, vibrant but tasteful colors, slight overhead angle",
    realistic: "true-to-life look, natural colors, natural light",
  } as const;

  const selectedStyle =
    stylePrompts[(style as keyof typeof stylePrompts) || "professional"] ||
    stylePrompts.professional;

  const variability = [
    "soft shadows",
    "45-degree angle",
    "slight overhead angle",
    "natural color grading",
    "balanced composition",
    "gentle depth of field",
  ];
  const picked = variability.sort(() => 0.5 - Math.random()).slice(0, 2);

  // Aim for less over-produced look (avoid always ultra-high resolution phrasing)
  return `Square 1:1 food photograph of ${baseDesc}. Style focus: ${selectedStyle}. Include ${picked.join(
    " and "
  )}. Realistic portion size, no text, no watermark, natural appealing lighting.`;
}

export async function GET() {
  return NextResponse.json({
    status: "Gemini AI Image Generation API",
    configured: !!process.env.GOOGLE_GEMINI_API_KEY,
    model: "gemini-2.5-flash-image-preview",
    capabilities: ["text-to-image", "professional-food-photography"],
  });
}
